/* retrieve the movies that have not received any review */
/* use of the $exists operator */
db.movie.find(
    {
        "ratings": { "$exists": false }
    },
    {
        "title": 1,
        "ratings": 1
    }
)

/* consider that sometimes ratings can be defined in a document with null */
db.movie.find(
    {
        "$or": [
            { "ratings": { "$exists": false } },
            { "ratings": null }
        ]  
    },
    {
        "title": 1,
        "ratings": 1
    }
)

/* retrieve the movies that have received at least one review (ratings exist) */
/* consider the case of movies with ratings: null that have to be excluded */
db.movie.find(
    {
        "$and": [
            {"ratings": { "$exists": true }},
            {"ratings": { "$ne": null } }
        ]
    },
    {
        "title": 1,
        "ratings": 1
    }
)

/* retrieve the number of movies from 2010 */
db.movie.find(
    {
        "year": "2010"
    }
).count()

/* alternative solution with aggregation framework */
db.movie.aggregate(
    [
        { "$match": { "year": "2010" } },
        { "$group": { 
            "_id": "$year", 
            "number_of_movies": { "$sum": 1 } 
        } }
    ]
)

/* alternative solution */
db.movie.aggregate(
    [
        { "$match": { "year": "2010" } },
        { "$group": { 
            "_id": null, 
            "number_of_movies": { "$sum": 1 } 
        } }
    ]
)

/* return the title and the year of the movies of 2010 */
db.movie.find(
    { "year": "2010" },
    { "title": 1,
        "year": 1
    }
)

/* alternative solution with aggregate */
db.movie.aggregate(
    [
        { "$match": { "year": "2010" } },
        { "$project": { "_id": 0, "title": 1, "year": 1 } }
    ]
)

/* retrieve the number of movies by year */
/* the '$' before a field name indicates that the value of this field from incoming document will be considered in the operation. In this example, $year means group by the values of the year field. */
/* sort the result according to the counts in descending order and sort by year in ascending order when the counter are the same */
db.movie.aggregate(
    [
        { "$group": { "_id": "$year", "number_of_movies": { "$sum": 1 } } },
        { "$sort": { "number_of_movies": -1, "_id": 1 } }
    ]
)

/* movies from 2010: alternative solution, but less efficient */
db.movie.aggregate(
    [
        { "$group": { "_id": "$year", "number_of_movie": { "$sum": 1 } } },
        { "$match": { "_id": "2010" } }
    ]
)

/* retrieve the overall length of movies with Leonardo DiCaprio */
db.movie.aggregate(
    [
        { "$match": { "crew.give_name": "Leonardo DiCaprio" } },
        { "$group": { 
            "_id": "Leonardo DiCaprio", 
            "overall_length": { "$sum": "$length" } } },
        { "$project": { "_id": 0, 
            "person_name": "Leonardo DiCaprio", 
            "overall_length": 1 } }
    ]
)

/* retrieve the average length of movies with Leonardo DiCaprio */
db.movie.aggregate(
    [
        { "$match": { "crew.give_name": "Leonardo DiCaprio" } },
        { "$group": { 
            "_id": "Leonardo DiCaprio", "overall_movie_length": { "$sum": "$length" },
            "average_movie_length": { "$avg": "$length" } } },
        { "$project": { "_id": 0, 
            "person_name": "Leonardo DiCaprio", 
            "overall_movie_length": 1,
            "average_movie_length": 1 } }
    ]
)

/* calculate the average length of movies with Leonardo DiCaprio from sum and count (different result from avg. Why?) */
/* hints: use:  
A: { "$sum": "$length" } for sum of length,  
B: { "$sum": 1 } for counting movies, 
$divide to calculate the ratio between A and B */

