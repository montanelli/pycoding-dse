/* retrieve the orders submitted on Tuesday (order_dow = 2) between 8 and 20 */
db.orders.find(
{
    "order_dow": 2,
    "order_hour_of_day": {
        "$lte": 20,
        "$gte": 8
    }
})


/* what is the result of the following statement? */
/* orders submitted on Tuesday (order_dow = 2) between 8 and 20 where at least one product contains the string "soda" (case insensitive match). In the result, only the fields order_id, order_dow, order_hour_of_day are shown as well as the contents (all the fields) of the first soda-matching product. The result is sorted by user_id in ascending order. */
db.orders.find(
{
	"order_dow": 2,
	"order_hour_of_day": {
		"$gte": 8,
		"$lte": 20
	},
	"products.product_name": { "$regex": /soda/i }
}, 
{
	"_id": 0, 
	"order_id": 1,
	"order_dow": 1,
	"order_hour_of_day": 1,
	"products.product_name.$": 1
}).sort({"user_id": 1});


/* count the number of orders submitted on Tuesday (order_dow = 2) between 8 and 20 where "soda" is ordered. Use aggregate. */
db.orders.aggregate(
[
    { "$match": { "order_dow": 2,
	                "order_hour_of_day": {
		                "$gte": 8,
		                "$lte": 20
	                },
                  "products.product_name": { "$regex": /soda/i } } },
    { "$group": { "_id": null, "Number of orders": { "$sum": 1 } } }
])


/* retrieve the orders submitted on Tuesday (order_dow = 2) between 8 and 20 where "soda" is ordered as first product in the cart (add_to_cart_order).
In this case, the regular expression requires that "soda" is exactly the value of product_name (case insensitive match).
In regular expressions:
^: represents the beginning of the field value
$: represents the end of the field value */
db.orders.find(
{
	"order_dow": 2,
	"order_hour_of_day": {
		"$gte": 8,
		"$lte": 20
	},
    "products": { "$elemMatch": {
        "product_name": { "$regex": /^soda$/i },
        "add_to_cart_order": 1
    }}	
}, 
{
	"_id": 0, 
	"order_id": 1,
	"order_dow": 1,
	"order_hour_of_day": 1,
	"products.product_name.$": 1
})


/* retrieve the orders in which both order_dow and order_hour_of_day are not provided */
db.orders.find(
{
    "$and":[
        "$or":[
            "order_dow": null,
            "order_dow": { "$exists": false }
        ],
        "$or":[
            "order_hour_of_day": null,
            "order_hour_of_day": { "$exists": false }
        ],
    ]
})


/* retrieve the number of orders by dow and sort the result by dow */
db.orders.aggregate(
{
    "$group": { "_id": "$order_dow", "number of orders": { "$sum": 1 } },
    "$sort": { "_id": 1 }
})


/* retrieve the orders submitted on Monday (order_dow = 1) and for each of them, return the number of products. Sort the result by the number of products in descending order */
db.orders.aggregate(
[
    {"$match": {"order_dow": 1 } },
    {"$unwind": "$products" },
    {"$group": { "_id": "$order_id", "number of products": { "$sum": 1 } } },
    { "$project": { "_id": 0, "order_id": "$_id", "number of products": 1 } },
    { "$sort": { "number of products": -1 } }
])

/* alternative solution with $size */
db.orders.aggregate(
[
    {"$match": {"order_dow": 1, "products": { "$type": "array" } } },
    {"$project": { "order_id": 1, "number of poducts": { "$size": "$products" } } }
])

/* we need to consider also orders with 0 products and orders with 1 product (not in a list) */
/* use UnionWith to include the above situations */
/* https://www.mongodb.com/docs/manual/reference/operator/aggregation/unionWith/ */
db.orders.aggregate(
[
    { "$match": {"order_dow": 1, "products": { "$type": "array" } } },
    { "$project": { "order_id": 1, "number of poducts": { "$size": "$products" } } },
    { "$unionWith": { "coll": "orders", "pipeline": 
    [ 
        { "$match": { "products": { "$exists": false } } },
        { "$project": { "order_id": 1, "number of poducts": 0 } }
    ] } },
    { "$unionWith": { "coll": "orders", "pipeline": 
    [ 
        { "$match": { "$and": [
            { "products": { "$exists": true } },
            { "products": { "$type": { "$ne": "array" } } }
        ] } },
        { "$project": { "order_id": 1, "number of poducts": 1 } }
    ] } }
])

/* what is the result of the following statement? */
/* a document in the result describes a beverage product with corresponding number of orders in which it is contained  */ 
db.orders.aggregate([
	{ "$unwind": "$products" },
	{ "$match": { "products.department": "beverages" } },
	{ "$group": { "_id": {"p_id": "$products.product_id", "p_name": "$products.product_name"}, "Number of orders": { "$sum": 1 } } }
]);


/* retrieve the products of department "beverages" that have been ordered more than 100 times */
db.orders.aggregate([
	{ "$unwind": "$products" },
	{ "$match": { "products.department": "beverages" } },
	{ "$group": { "_id": {"p_id": "$products.product_id", "p_name": "$products.product_name"}, "Number of orders": { "$sum": 1 } } },
    { "$match": { "Number of orders": { "$gt": 100 } } }
]);


/* for each order submitted on Monday (order_dow = 1), retrieve the number of products by aisle */
db.orders.aggregate(
[
    {"$match": {"order_dow": 1 } },
    {"$unwind": "$products"},
    {"$group": {"_id": {"aid": "$products.aisle_id", "aname": "$products.aisle" }, "Number of products": { "$sum": 1 } } }
])


/* for each order submitted on Monday (order_dow = 1), retrieve the number of products and the average number of products per aisle */
db.orders.aggregate([
	{ "$unwind": "$products" },
	{ "$match": { "order_dow": 1} },
	{ "$group": { "_id": {"o_id": "$order_id", "a_id": "$products.aisle_id" }, "Number of products in aisle": { "$sum": 1 } } },
	{ "$group": { "_id": "$_id.o_id" , "Number of products": { "$sum": "$Number of products in aisle" }, "Avg number of products per aisle": { "$avg": "$Number of products in aisle" } } }
]);

/* add the clause "order_id": 22 to the match stage of the previous two exercises to check if the result is correct on a specific order_id */

